{"name":"prettyjson","tagline":"Package for formatting JSON data in a coloured YAML-style, perfect for CLI output","body":"# prettyjson [![Build Status](https://secure.travis-ci.org/rafeca/prettyjson.png)](http://travis-ci.org/rafeca/prettyjson) [![NPM version](https://badge.fury.io/js/prettyjson.png)](http://badge.fury.io/js/prettyjson) [![Coverage Status](https://coveralls.io/repos/rafeca/prettyjson/badge.png?branch=master)](https://coveralls.io/r/rafeca/prettyjson?branch=master)\r\n\r\nPackage for formatting JSON data in a coloured YAML-style, perfect for CLI output.\r\n\r\n## How to install\r\n\r\nJust install it via NPM:\r\n\r\n```bash\r\n$ npm install -g prettyjson\r\n```\r\n\r\nThis will install `prettyjson` globally, so it will be added automatically\r\nto your `PATH`.\r\n\r\n## Using it (from the CLI)\r\n\r\nThis package installs a command line interface to render JSON data in a more\r\nconvenient way. You can use the CLI in three different ways:\r\n\r\n**Decode a JSON file:** If you want to see the contents of a JSON file, just pass\r\nit as the first argument to the CLI:\r\n\r\n```bash\r\n$ prettyjson package.json\r\n```\r\n\r\n![Example 1](https://raw.github.com/rafeca/prettyjson/master/images/example3.png)\r\n\r\n**Decode the stdin:** You can also pipe the result of a command (for example an\r\nHTTP request) to the CLI to see the JSON result in a clearer way:\r\n\r\n```bash\r\n$ curl https://api.github.com/users/rafeca | prettyjson\r\n```\r\n\r\n![Example 2](https://raw.github.com/rafeca/prettyjson/master/images/example4.png)\r\n\r\n**Decode random strings:** if you call the CLI with no arguments, you'll get a\r\nprompt where you can past JSON strings and they'll be automatically displayed in a clearer way:\r\n\r\n![Example 3](https://raw.github.com/rafeca/prettyjson/master/images/example5.png)\r\n\r\n### Command line options\r\n\r\nIt's possible to customize the output through some command line options:\r\n\r\n```bash\r\n# Change colors\r\n$ prettyjson --string=red --keys=blue --dash=yellow --number=green package.json\r\n\r\n# Do not use colors\r\n$ prettyjson --nocolor=1 package.json\r\n\r\n# Change indentation\r\n$ prettyjson --indent=4 package.json\r\n```\r\n\r\n**Deprecation Notice**: The old configuration through environment variables is\r\ndeprecated and it will be removed in the next major version (1.0.0).\r\n\r\n## Using it (from Node.js)\r\n\r\nIt's pretty easy to use it. You just have to include it in your script and call\r\nthe `render()` method:\r\n\r\n```javascript\r\nvar prettyjson = require('prettyjson');\r\n\r\nvar data = {\r\n  username: 'rafeca',\r\n  url: 'https://github.com/rafeca',\r\n  twitter_account: 'https://twitter.com/rafeca',\r\n  projects: ['prettyprint', 'connfu']\r\n};\r\n\r\nvar options = {\r\n  noColor: true\r\n};\r\n\r\nconsole.log(prettyjson.render(data, options));\r\n```\r\n\r\nAnd will output:\r\n\r\n![Example 4](https://raw.github.com/rafeca/prettyjson/master/images/example1.png)\r\n\r\nYou can also configure the colors of the hash keys and array dashes\r\n(using [colors.js](https://github.com/Marak/colors.js) colors syntax):\r\n\r\n```javascript\r\nvar prettyjson = require('prettyjson');\r\n\r\nvar data = {\r\n  username: 'rafeca',\r\n  url: 'https://github.com/rafeca',\r\n  twitter_account: 'https://twitter.com/rafeca',\r\n  projects: ['prettyprint', 'connfu']\r\n};\r\n\r\nconsole.log(prettyjson.render(data, {\r\n  keysColor: 'rainbow',\r\n  dashColor: 'magenta',\r\n  stringColor: 'white'\r\n}));\r\n```\r\n\r\nWill output something like:\r\n\r\n![Example 5](https://raw.github.com/rafeca/prettyjson/master/images/example2.png)\r\n\r\n## Running Tests\r\n\r\nTo run the test suite first invoke the following command within the repo,\r\ninstalling the development dependencies:\r\n\r\n```bash\r\n$ npm install\r\n```\r\n\r\nthen run the tests:\r\n\r\n```bash\r\n$ npm test\r\n```\r\n\r\nOn windows, you can run the tests with:\r\n\r\n```cmd\r\nC:\\git\\prettyjson> npm run-script testwin\r\n```\r\n","google":"UA-6212472-4","note":"Don't delete this file! It's used internally to help with page regeneration."}